import os
import asyncio
import re
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from src.embeddings.indexer import search
from src.rag.prompt_builder import build_system_prompt
from src.rag.response_formatter import add_html_links

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHAT_URL = os.getenv("LMSTUDIO_BASE_URL", "http://localhost:1234/v1")
LLM_MODEL = os.getenv("LMSTUDIO_MODEL", "TheBloke/Saiga2-7B-GGUF")
TOP_K = int(os.getenv("TOP_K", 2))
REQUEST_TIMEOUT = 120  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGE = """
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ EORA ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–∞—à–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫ –∏ —Ä–µ—à–µ–Ω–∏–π.

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏
‚Ä¢ –ù–∞–π—Ç–∏ –∫–µ–π—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞—á–∞–º

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?
‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è –±–∞–Ω–∫–æ–≤?
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–µ–π—Å—ã –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º

–Ø –Ω–∞–π–¥—É —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –¥–∞–¥—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
"""

HELP_MESSAGE = """
üõ†Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:

1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—à–µ–Ω–∏—è—Ö EORA
2. –Ø –ø–æ–∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
3. –°—Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
4. –í –æ—Ç–≤–µ—Ç–µ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–µ–ª - —ç—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥–ª—è e-commerce?
‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è Dodo Pizza?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –≤ —Å—Ñ–µ—Ä–µ AI?

‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è!

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""

async def ask_lmstudio(question: str, context: str, sources: list) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    url = f"{CHAT_URL}/chat/completions"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = build_system_prompt(context, sources)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": LLM_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "temperature": 0.3,
        "max_tokens": 1024,
        "stop": ["\n\n"]
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as session:
        try:
            async with session.post(url, json=payload) as response:
                response.raise_for_status()
                data = await response.json()
                return data["choices"][0]["message"]["content"]
        except asyncio.TimeoutError:
            return "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        except aiohttp.ClientError as e:
            print(f"HTTP –æ—à–∏–±–∫–∞: {str(e)}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

@dp.message(Command("start"))
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–º–æ—â—å")],
            [types.KeyboardButton(text="–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(WELCOME_MESSAGE, 
                         parse_mode=None,
                         reply_markup=keyboard)

@dp.message(Command("help"))
async def handle_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    await message.answer(HELP_MESSAGE, parse_mode=None)

@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await handle_help(message)

@dp.message(lambda message: message.text == "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_examples(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤'"""
    examples = (
        "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:\n\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã?\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–µ–π—Å—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–æ–≤\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–∞?\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è KazanExpress?\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –≤ —Å—Ñ–µ—Ä–µ –º–µ–¥–∏—Ü–∏–Ω—ã"
    )
    await message.answer(examples, parse_mode=None)

async def detect_hallucinations(answer: str, context: str) -> bool:
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π LLM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏.
    """
    answer_lower = answer.lower()
    
    # –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
    uncertainty_phrases = [
        "—è –Ω–µ —É–≤–µ—Ä–µ–Ω", "–Ω–µ –∑–Ω–∞—é", "–Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å", 
        "–Ω–µ –∏–º–µ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏", "–Ω–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é –¥–∞–Ω–Ω—ã–º–∏",
        "—É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    ]
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–∑—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è
    if any(phrase in answer_lower for phrase in uncertainty_phrases):
        return True
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è
    if re.search(r'\[\d+\]', answer):
        return False
        
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 5 —Å–ª–æ–≤) - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å—à–µ
    if len(answer.split()) < 5:
        return False
    
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_lower = context.lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π > 4 —Å–∏–º–≤–æ–ª–æ–≤)
    context_keywords = set(re.findall(r'\b[–∞-—è—ë]{5,}\b', context_lower))
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    common_words = {"–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä—ã–µ", "–∫–æ—Ç–æ—Ä—ã—Ö", "—Ç–∞–∫–∂–µ", "–æ—á–µ–Ω—å", "–º–Ω–æ–≥–∏–µ", "–¥—Ä—É–≥–∏–µ"}
    context_keywords = context_keywords - common_words
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_sample = list(context_keywords)[:10]
    
    # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    for keyword in context_sample:
        if keyword in answer_lower:
            return False
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è
    return True

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", parse_mode=None)
        return
        
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
    GENERAL_QUESTIONS = {
        "–ø—Ä–∏–≤–µ—Ç": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—à–µ–Ω–∏—è—Ö EORA.",
        "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ EORA!",
        "–ø–æ–º–æ—â—å": HELP_MESSAGE,
        "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": WELCOME_MESSAGE,
        "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!",
    }
    
    query_lower = query.lower()
    if query_lower in GENERAL_QUESTIONS:
        await message.answer(GENERAL_QUESTIONS[query_lower], parse_mode=None)
        return
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π EORA...", parse_mode=None)
    
    try:
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        chunks = await asyncio.to_thread(search, query, TOP_K)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not chunks:
            await processing_msg.edit_text(
                "‚ùå –í –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—à–µ–Ω–∏—è—Ö EORA.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: /help",
                parse_mode=None
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        context_text = "\n---\n".join([c["text"] for c in chunks])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = []
        for c in chunks:
            url = c.get("url", "")
            if url and url != "unknown_url" and url not in sources:
                sources.append(url)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_msg.edit_text("ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", parse_mode=None)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        answer = await ask_lmstudio(query, context_text, sources)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if not answer.strip():
            answer = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

        # –î–µ—Ç–µ–∫—Ü–∏—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
        if not answer.startswith("‚ö†Ô∏è"):
            if await detect_hallucinations(answer, context_text):
                answer = (
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥–ª—è e-commerce?\n"
                    "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è Dodo Pizza?\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –≤ —Å—Ñ–µ—Ä–µ AI?"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        is_eora_related = any(
            kw in answer.lower() 
            for kw in ["eora", "—ç–æ—Ä–∞", "–ø—Ä–æ–µ–∫—Ç", "—Ä–µ—à–µ–Ω", "–∫–µ–π—Å", "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–∫–æ–º–ø–∞–Ω–∏—è", "—Ä–∞–∑—Ä–∞–±–æ—Ç"]
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        html_answer = add_html_links(answer, sources)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –æ EORA - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ —Å—Å—ã–ª–æ–∫
        if not is_eora_related:
            clean_answer = re.sub(r'<a href=[^>]+>\[(\d+)\]</a>', r'[\1]', html_answer)
            clean_answer = re.sub(r'\[\d+\]', '', clean_answer)
            await processing_msg.edit_text(
                clean_answer, 
                parse_mode=None
            )
        else:
            await processing_msg.edit_text(
                html_answer, 
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", parse_mode=None)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    ])
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ EORA Knowledge Assistant...")
    asyncio.run(main())