import os
import asyncio
import aiohttp
import re
import pathlib
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ContentType
from src.embeddings.indexer import search

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHAT_URL = os.getenv("LMSTUDIO_BASE_URL", "http://localhost:1234/v1")
LLM_MODEL = os.getenv("LMSTUDIO_MODEL", "TheBloke/Saiga2-7B-GGUF")
TOP_K = int(os.getenv("TOP_K", 2))

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGE = """
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ EORA ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–∞—à–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫ –∏ —Ä–µ—à–µ–Ω–∏–π.

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏
‚Ä¢ –ù–∞–π—Ç–∏ –∫–µ–π—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞—á–∞–º

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?
‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è –±–∞–Ω–∫–æ–≤?
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–µ–π—Å—ã –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º

–Ø –Ω–∞–π–¥—É —Å–∞–º—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –¥–∞–¥—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
"""

HELP_MESSAGE = """
üõ†Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:

1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—à–µ–Ω–∏—è—Ö EORA
2. –Ø –ø–æ–∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
3. –°—Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
4. –í –æ—Ç–≤–µ—Ç–µ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1], [2] - —ç—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥–ª—è e-commerce?
‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è Dodo Pizza?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –≤ —Å—Ñ–µ—Ä–µ AI?

‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è!

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""

async def ask_lmstudio(question: str, context: str, sources: list) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Å—Å—ã–ª–æ–∫"""
    url = f"{CHAT_URL}/chat/completions"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    sources_list = "\n".join([f"[{i+1}] {url}" for i, url in enumerate(sources)])
    
    # –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    system_prompt = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ EORA. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–∏–∂–µ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n"
        "### –°–¢–†–û–ì–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
        "1. –í—Å–µ–≥–¥–∞ –æ—Ñ–æ—Ä–º–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [1], [2], [3] –∏ —Ç.–¥.\n"
        "2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫.\n"
        "3. –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—á–Ω–∏–∫–∏' –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞.\n"
        "4. –ù–ï –¥–µ–ª–∞–π —Å–ª–æ–≤–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏, —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö.\n"
        "5. –ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –æ—Ç–≤–µ—Ç–∞:\n"
        "   '–î–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã –¥–ª—è HR [1] –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è [2].'\n"
        "6. –ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û –æ—Ç–≤–µ—Ç–∞:\n"
        "   '–î–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã –¥–ª—è HR 1 –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è 2.'\n\n"
        f"### –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{sources_list}\n\n"
        f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context[:2000]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    )
    
    payload = {
        "model": LLM_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "temperature": 0.3,
        "max_tokens": 1024,
        "stop": ["\n\n"]
    }
    
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=180)) as session:
        try:
            async with session.post(url, json=payload) as response:
                response.raise_for_status()
                data = await response.json()
                return data["choices"][0]["message"]["content"]
        except asyncio.TimeoutError:
            return "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

def add_html_links(answer: str, sources: list) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç HTML-—Å—Å—ã–ª–∫–∏ –∫ –Ω–æ–º–µ—Ä–∞–º [1], [2] –≤ –æ—Ç–≤–µ—Ç–µ"""
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ URL
    source_map = {str(i+1): url for i, url in enumerate(sources)}
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    #answer = re.sub(r'(?<!\()\b(\d+)\b(?!\))', r'[\1]', answer)  # –ó–∞–º–µ–Ω—è–µ—Ç "1" –Ω–∞ "[1]"
    answer = re.sub(r'\[(\d+)\]\([^)]*\)', r'[\1]', answer)  # –£–±–∏—Ä–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏
    
    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ [1], [2] –∏ —Ç.–¥.
    pattern = r'\[(\d+)\]'
    
    def replace_match(match):
        num = match.group(1)
        url = source_map.get(num)
        if url:
            return f'<a href="{url}">[{num}]</a>'
        return match.group(0)
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    linked_answer = re.sub(pattern, replace_match, answer)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ HTML-—Ç–µ–≥–∏
    linked_answer = linked_answer.replace('\n', '<br>')
    
    return linked_answer

@dp.message(Command("start"))
async def handle_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏"""
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–º–æ—â—å")],
            [types.KeyboardButton(text="–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(WELCOME_MESSAGE, 
                         parse_mode=None,
                         reply_markup=keyboard)

@dp.message(Command("help"))
async def handle_help(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    await message.answer(HELP_MESSAGE, parse_mode=None)

@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    await handle_help(message)

@dp.message(lambda message: message.text == "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
async def handle_examples(message: Message):
    examples = (
        "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:\n\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã?\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–µ–π—Å—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–æ–≤\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–∞?\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è KazanExpress?\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –≤ —Å—Ñ–µ—Ä–µ –º–µ–¥–∏—Ü–∏–Ω—ã"
    )
    await message.answer(examples, parse_mode=None)

@dp.message()
async def handle_message(message: Message):
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", parse_mode=None)
        return
        
    processing_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π EORA...", parse_mode=None)
    
    try:
        chunks = await asyncio.to_thread(search, query, TOP_K)
        if not chunks:
            await processing_msg.edit_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode=None)
            return
            
        context_text = "\n---\n".join([c["text"] for c in chunks])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ URL
        sources = []
        for c in chunks:
            url = c.get("url", "")
            if url and url != "unknown_url" and url not in sources:
                sources.append(url)
        
        await processing_msg.edit_text("ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...", parse_mode=None)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        try:
            answer = await asyncio.wait_for(
                ask_lmstudio(query, context_text, sources), 
                timeout=60.0
            )
        except asyncio.TimeoutError:
            answer = "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ
        html_answer = add_html_links(answer, sources)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await processing_msg.edit_text(
            html_answer, 
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", parse_mode=None)

async def main():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    ])
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ EORA Knowledge Assistant...")
    asyncio.run(main())