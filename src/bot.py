import os
import asyncio
import aiohttp
import pathlib
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from src.embeddings.indexer import search

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
EMBED_URL = os.getenv("LMSTUDIO_BASE_URL", "http://localhost:1234/v1")
LLM_MODEL = os.getenv("LMSTUDIO_MODEL")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ EORA. 

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Ä–µ—à–µ–Ω–∏—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

üîç –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è Dodo Pizza?
‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤?

–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–∞—à–∏ –∫–µ–π—Å—ã!
"""

async def ask_lmstudio(question: str, context: str, sources: list) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    url = f"{EMBED_URL}/chat/completions"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    formatted_context = "\n---\n".join([f"[{i+1}] {chunk}" for i, chunk in enumerate(context.split("\n---\n"))])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources_list = "\n".join([f"[{i+1}] {url}" for i, url in enumerate(sources)])
    
    payload = {
        "model": LLM_MODEL,
        "messages": [
            {
                "role": "system", 
                "content": (
                    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ EORA, –æ—Ç–≤–µ—á–∞—é—â–∏–π —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–∫–∞–∂–∏ '–ù–µ –∑–Ω–∞—é'.\n\n"
                    "### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                    "1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫: [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞](–ø–æ–ª–Ω—ã–π_URL)\n"
                    "2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–µ–π—Å\n"
                    "3. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n"
                    "   –î–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã –¥–ª—è HR, –Ω–∞–ø—Ä–∏–º–µ—Ä [–±–æ—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ –ú–∞–≥–Ω–∏—Ç](https://eora.ru/cases/chat-boty/hr-bot-dlya-magnit), –∞ —Ç–∞–∫–∂–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä [–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ –¥–ª—è KazanExpress](https://eora.ru/cases/kazanexpress-poisk-tovarov-po-foto)\n\n"
                    f"### –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{sources_list}\n\n"
                    f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{formatted_context}"
                )
            },
            {
                "role": "user", 
                "content": f"–í–æ–ø—Ä–æ—Å: {question}"
            }
        ],
        "temperature": 0.2,
        "max_tokens": 1024
    }
    
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
        async with session.post(url, json=payload) as response:
            try:
                response.raise_for_status()
                data = await response.json()
                return data["choices"][0]["message"]["content"]
            except aiohttp.ClientResponseError as e:
                print(f"Chat API error: {e.status} {e.message}")
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            except Exception as e:
                print(f"Unexpected error: {str(e)}")
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(WELCOME_MESSAGE, parse_mode="Markdown")

@dp.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(WELCOME_MESSAGE, parse_mode="Markdown")

@dp.message()
async def handle_message(message: Message):
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
        return
        
    processing_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π EORA...")
    
    try:
        chunks = await asyncio.to_thread(search, query, int(os.getenv("TOP_K", 4)))
        if not chunks:
            await processing_msg.edit_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        context_text = "\n---\n".join([c["text"] for c in chunks])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        sources = []
        for c in chunks:
            url = c.get("url", "")
            if url and url != "unknown_url" and url not in sources:
                sources.append(url)
        
        await processing_msg.edit_text("ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        answer = await ask_lmstudio(query, context_text, sources)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await processing_msg.edit_text(
            f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{answer}", 
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"Error handling message: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞")
    ])
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("Starting EORA Knowledge Assistant...")
    asyncio.run(main())